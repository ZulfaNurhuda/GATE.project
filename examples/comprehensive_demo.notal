PROGRAM ComprehensiveDemo
{ Demonstrating all three new features: Records, Enums, and Constraints }
KAMUS
    { === RECORD TYPES === }
    type Student: <
        id: integer,
        name: string,
        gpa: real,
        year: integer
    >
    
    type Course: <
        code: string,
        title: string,
        credits: integer,
        instructor: string
    >
    
    { === ENUM TYPES === }
    type Grade: (A, B, C, D, F)
    type Semester: (Fall, Spring, Summer)
    type Status: (Enrolled, Graduated, Withdrawn, OnHold)
    
    { === VARIABLES WITH CUSTOM TYPES === }
    student1: Student
    course1: Course
    finalGrade: Grade
    currentSem: Semester
    studentStatus: Status
    
    { === CONSTRAINED VARIABLES === }
    studentAge: integer | studentAge >= 16 and studentAge <= 65
    gpaScore: real | gpaScore >= 0.0 and gpaScore <= 4.0
    creditHours: integer | creditHours >= 1 and creditHours <= 6
    attendance: real | attendance >= 0.0 and attendance <= 100.0
    examScore: integer | examScore >= 0 and examScore <= 100
    
    { === REGULAR VARIABLES === }
    counter: integer
    message: string
    isValid: boolean
    
ALGORITMA
    { Initialize regular variables }
    counter <- 1
    message <- 'NOTAL Transpiler with Records, Enums, and Constraints!'
    isValid <- true
    
    { Set constrained variables }
    studentAge <- 20
    gpaScore <- 3.75
    creditHours <- 4
    attendance <- 95.0
    examScore <- 87
    
    { Output demonstration }
    output('=== NOTAL TRANSPILER DEMO ===')
    output('Message: ', message)
    output('Counter: ', counter)
    output('Valid: ', isValid)
    output('')
    output('=== CONSTRAINED VARIABLES ===')
    output('Student Age: ', studentAge)
    output('GPA Score: ', gpaScore)
    output('Credit Hours: ', creditHours)  
    output('Attendance: ', attendance, '%')
    output('Exam Score: ', examScore)
    output('')
    output('All features implemented successfully!')